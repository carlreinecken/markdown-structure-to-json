(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory():typeof define==="function"&&define.amd?define(factory):(global=global||self,global.md2json=factory())})(this,(function(){"use strict";var parser=text=>{const HEADER_REGEX=/^#{1,6} /;const LIST_REGEX=/^( *)(\d\.|\+|-|\*) /;function getHeaderLevel(line){if(line==null){return null}const match=line.match(HEADER_REGEX);if(match==null){return null}return match[0].trim().length}function getTypeOf(line){if(HEADER_REGEX.test(line)){return"header"}if(LIST_REGEX.test(line)){return"list"}return"paragraph"}function getListLevel(line){const match=line.match(LIST_REGEX);if(match==null){return null}return match[1].length}function makeContentList(lines){if(!lines||lines.length<1){return lines}const result=[];while(lines[0]!=null&&getTypeOf(lines[0])==="paragraph"){let newLine=lines.shift();result.push(newLine)}if(lines.length<1){return result}const lineType=getTypeOf(lines[0]);const block={content:[]};let level=null;if(lineType==="header"){level=getHeaderLevel(lines[0]);block.header=lines.shift().replace(HEADER_REGEX,"");while(lines[0]!=null&&getHeaderLevel(lines[0])!==level){let newLine=lines.shift();block.content.push(newLine)}}else if(lineType==="list"){level=getListLevel(lines[0]);block.type="list";while(lines[0]!=null&&getTypeOf(lines[0])==="list"){let newLine=lines.shift();if(getListLevel(newLine)===level){newLine=newLine.replace(LIST_REGEX,"")}block.content.push(newLine)}}block.content=makeContentList(block.content);result.push(block);makeContentList(lines).map(blck=>result.push(blck));return result}if(!Array.isArray(text)){text=text.split("\n")}text=text.filter(line=>line!=="");return makeContentList(text)};return parser}));
